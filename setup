#!/bin/bash
set -o errexit
set -o nounset
set +h

source ./config.inc
source ./function.inc

PRGNAME=${0##*/}
LOGFILE="${HOST_TOP}/${LOGDIR}/${PRGNAME}-${LOGFILE}"

# This file creates the $LFS/tools, $LFS/cross-tools directory,
# adds the CLFS user, and creates .bash_profil and .bashrc


if [[ $EUID -ne 0 ]]; then
	echo "This must be run as root!"
	exit 1
fi

msg_section "CLFS BUILD SYSTEM SETUP"

# create directory: $LFS
[ -d ${LFS} ] || {
 build "Creating ${LFS}: " "install -vdm 755 ${LFS}" "${LOGFILE}"
 build "Mounting ${DEVICE} to ${LFS}" "mount -v ${DEVICE} -t ${FILESYSTEM} ${LFS} " "${LOGFILE}"
}

# 4.2 Creating the ${CLFS}/tools Directory

# create $LFS/tools
[ -d ${LFS}/tools ] || build "Creating ${LFS}${TOOLS}: " "install -vdm 755 ${LFS}${TOOLS}" "${LOGFILE}"
[ -h ${TOOLS} ] || build "Creating symlink - ${TOOLS}: " "ln -sv ${LFS}${TOOLS} /" "${LOGFILE}"

# 4.3 Creating the ${CLFS}/cross-tools Directory

# create $LFS/cross-tools
[ -d ${LFS}${CROSS_TOOLS} ] || build "Creating ${LFS}${CROSS_TOOLS}: " "install -vdm 755 ${LFS}${CROSS_TOOLS}" "${LOGFILE}"
[ -h ${TOOLS} ] || build "Creating symlink - ${CROSS_TOOLS}: " "ln -sv ${LFS}${CROSS_TOOLS} /" "${LOGFILE}"

# 4.4 Adding the CLFS user
# 4.4 Setting up the environment
# 4.6 Build Variables
[ -d /home/${LFS_USER} ] || {
	msg "Adding clfs user to host: "
	getent group  ${LFS_USER} > /dev/null 2>&1 || build "  Creating group: ${LFS_USER}" "groupadd ${LFS_USER}" "${LOGFILE}"
	getent passwd ${LFS_USER} > /dev/null 2>&1 || build "  Creating user:  ${LFS_USER}" "useradd -c 'CLFS user' -g ${LFS_USER} -m -k /dev/null -s /bin/bash ${LFS_USER}" "${LOGFILE}"
	build "  Changing ownership /home/${LFS_USER}" "chown -R ${LFS_USER}:${LFS_USER} /home/${LFS_USER}" "${LOGFILE}"

	# create .bash_profile for the lfs user
	msg_line "  Creating /home/${LFS_USER}/.bash_profile: "
	cat > /home/$LFS_USER/.bash_profile <<- "EOF"
		exec env -i HOME=$HOME TERM=$TERM PS1='(clfs environment)\u:\w\$ ' /bin/bash
	EOF
	msg_success

	# create .bashrc for the clfs user
	msg_line "  Creating /home/${LFS_USER}/.bashrc: "
	cat > /home/${LFS_USER}/.bashrc <<- EOF
		set +h
		umask 022
		CLFS=${LFS}
		LC_ALL=POSIX
		PATH=${CROSS_TOOLS}/bin:/bin:/usr/bin
		export CLFS LC_ALL PATH
		unset CFLAGS CXXFLAGS
		export CLFS_HOST="${CLFS_HOST}"
		export CLFS_TARGET="${CLFS_TARGET}"
		export CLFS_TARGET32="${CLFS_TARGET32}"
		export BUILD32="${BUILD32}"
		export BUILD64="${BUILD64}"
		export LFS_TOP="${LFS_TOP}"
		alias ls='ls -C --color=auto'
	EOF
	msg_success
}

# 3.1 All Packages

# download all packages into SOURCES
[ -d ${SOURCESDIR} ] || {
	msg "Fetching sources: "
	build "  Create directory: ${SOURCESDIR}" "install -vdm 755 ${SOURCESDIR}" "${LOGFILE}"
    build "  Fetching LFS packages: " "wget -i clfs.x86_64.list -c -4 -nc --continue --directory-prefix=${HOST_TOP}/${SOURCESDIR} --no-check-certificate" "${LOGFILE}"
    #grep -v '^#' ../MD5SUMS | awk '{print $2}' | wget -i- -c

    # check the md5 sums
    
    pushd ${SOURCESDIR}
    md5sum -c ../clfs.x86_64.md5sum
    popd
}

#
#	Set ownership of build directory to $LFS
#
#build "Set ownership of build directory to ${LFS_USER}" "chown -R ${LFS_USER}:${LFS_USER} ${HOST_TOP}" "${LOGFILE}"

#
#	Copy build system to $LFS
#
LIST="book logs scripts sources  "				         # directories
LIST+="config.inc function.inc "				         # build system includes
LIST+="build-clfs toolchain.sh build-shell.sh go-chroot.sh "	 # build system scripts
LIST+="config-3.14-x86_64 "	                         # kernel configuration file
LIST+="locale-gen.conf locale-gen.sh "                   # locale generator

msg "Install build system: "
build "	Installing directories" "install -vdm 755 ${LFS}${LFS_TOP}/{book,build,logs,scripts,sources}" "${LOGFILE}"
build "	Copying files" "cp -var ${LIST} ${LFS}${LFS_TOP}" "${LOGFILE}"
build "	Setting ownership to lfs user" "chown -R ${LFS_USER}:${LFS_USER} ${LFS}" "${LOGFILE}"

#build " Changing directory - ${LFS}${PARENT}:" "cd ${LFS}${PARENT}" "${LOGFILE}"

msg_section "CLFS BUILD SYSTEM SETUP DONE"
msg ""
msg "Change directory to ${LFS}${LFS_TOP} and run './build-clfs'"

exit 0 
